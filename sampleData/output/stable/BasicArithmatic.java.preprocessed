construct.type	class
identifier	BasicArithmatic
control	{
mod.access	static
mod.behaviour	final
type	int
identifier	constant
operator.binary	=
literal.int	10
control	;
mod.access	static
type	int
identifier	casualMethod
control	(
control	)
control	{
action	return
literal.int	1
control	;
control	}
mod.access	static
type	void
identifier	main
control	(
identifier	String
identifier	args
control	)
control	{
type	int
identifier	a
operator.binary	=
literal.int	4
control	;
type	int
identifier	b
operator.binary	=
literal.int	2
operator.binary	+
identifier	casualMethod
control	(
control	)
control	;
construct.conditional	if
control	(
literal.boolean	true
control	)
control	{
identifier	b
operator.binary	+=
literal.int	1
control	;
control	}
type	int
identifier	sum
operator.binary	=
identifier	a
operator.binary	+
identifier	b
control	;
type	int
identifier	product
operator.binary	=
identifier	a
operator.binary	*
identifier	b
control	;
type	int
identifier	difference
operator.binary	=
identifier	a
operator.binary	-
identifier	b
control	;
type	int
identifier	addImmediate
operator.binary	=
identifier	a
operator.binary	+
literal.int	2
control	;
type	int
identifier	subImmediate
operator.binary	=
identifier	a
operator.binary	-
literal.int	2
control	;
type	int
identifier	multiplyImmediate
operator.binary	=
identifier	b
operator.binary	*
literal.int	0x05
control	;
type	int
identifier	parenthesis
operator.binary	=
identifier	a
operator.binary	+
control	(
identifier	a
operator.binary	+
identifier	b
control	)
control	;
type	int
identifier	pemdasFull
operator.binary	=
control	(
identifier	a
operator.binary	+
identifier	b
control	)
operator.binary	*
literal.int	3
operator.binary	-
literal.int	10
control	;
type	int
identifier	pemdasFullAlternate
operator.binary	=
identifier	a
operator.binary	+
identifier	b
operator.binary	*
control	(
literal.int	3
operator.binary	-
literal.int	10
control	)
control	;
type	int
identifier	multipleParenthis
operator.binary	=
literal.int	1
operator.binary	+
control	(
identifier	a
operator.binary	+
control	(
identifier	b
operator.binary	-
literal.int	5
control	)
operator.binary	*
literal.int	2
control	)
operator.binary	*
literal.int	7
control	;
control	}
control	}

MODIFIER_ACCESS_PERMISSIONS public
CONSTRUCT_TYPE_DEF class
REFERNCE BasicArithmatic
CONTROL {
MODIFIER_ACCESS_PERMISSIONS private
MODIFIER_ACCESS static
MODIFIER_BEHAVIOUR final
TYPE int
REFERNCE constant
OPERATOR_BINARY =
LITERAL_INT 10
CONTROL ;
MODIFIER_ACCESS_PERMISSIONS public
MODIFIER_ACCESS static
TYPE int
REFERNCE CasualMethod
CONTROL (
CONTROL )
CONTROL {
ACTION return
LITERAL_INT 1
CONTROL ;
CONTROL }
MODIFIER_ACCESS_PERMISSIONS public
MODIFIER_ACCESS static
TYPE int
REFERNCE Sum
CONTROL (
TYPE int
REFERNCE a
CONTROL ,
TYPE int
REFERNCE b
CONTROL )
CONTROL {
ACTION return
REFERNCE a
OPERATOR_BINARY +
REFERNCE b
CONTROL ;
CONTROL }
MODIFIER_ACCESS_PERMISSIONS public
MODIFIER_ACCESS static
TYPE void
REFERNCE main
CONTROL (
REFERNCE String
CONTROL [
CONTROL ]
REFERNCE args
CONTROL )
CONTROL {
TYPE int
REFERNCE a
OPERATOR_BINARY =
LITERAL_INT 4
CONTROL ;
TYPE int
REFERNCE b
OPERATOR_BINARY =
LITERAL_INT 3
CONTROL ;
TYPE int
REFERNCE sum
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY +
REFERNCE b
CONTROL ;
TYPE int
REFERNCE product
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY *
REFERNCE b
CONTROL ;
TYPE int
REFERNCE difference
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY -
REFERNCE b
CONTROL ;
TYPE int
REFERNCE addImmediate
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY +
LITERAL_INT 2
CONTROL ;
TYPE int
REFERNCE subImmediate
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY -
LITERAL_INT 2
CONTROL ;
TYPE int
REFERNCE addConstant
OPERATOR_BINARY =
REFERNCE b
OPERATOR_BINARY *
REFERNCE constant
CONTROL ;
REFERNCE addConstant
OPERATOR_BINARY +=
LITERAL_INT 2
CONTROL ;
TYPE int
REFERNCE multiplyImmediate
OPERATOR_BINARY =
REFERNCE b
OPERATOR_BINARY *
LITERAL_INT 0x05
CONTROL ;
TYPE int
REFERNCE parenthesis
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY +
CONTROL (
REFERNCE a
OPERATOR_BINARY +
REFERNCE b
CONTROL )
CONTROL ;
TYPE int
REFERNCE pemdasFull
OPERATOR_BINARY =
CONTROL (
REFERNCE a
OPERATOR_BINARY +
REFERNCE b
CONTROL )
OPERATOR_BINARY *
LITERAL_INT 3
OPERATOR_BINARY -
LITERAL_INT 10
CONTROL ;
TYPE int
REFERNCE pemdasFullAlternate
OPERATOR_BINARY =
REFERNCE a
OPERATOR_BINARY +
REFERNCE b
OPERATOR_BINARY *
CONTROL (
LITERAL_INT 3
OPERATOR_BINARY -
LITERAL_INT 10
CONTROL )
CONTROL ;
TYPE int
REFERNCE multipleParenthis
OPERATOR_BINARY =
LITERAL_INT 1
OPERATOR_BINARY +
CONTROL (
REFERNCE a
OPERATOR_BINARY +
CONTROL (
REFERNCE b
OPERATOR_BINARY -
LITERAL_INT 5
CONTROL )
OPERATOR_BINARY *
LITERAL_INT 2
CONTROL )
OPERATOR_BINARY *
LITERAL_INT 7
CONTROL ;
REFERNCE multiplyImmediate
OPERATOR_BINARY =
REFERNCE multiplyImmediate
OPERATOR_BINARY <<
LITERAL_INT 1
CONTROL ;
TYPE boolean
REFERNCE test
OPERATOR_BINARY =
LITERAL_BOOLEAN true
OPERATOR_BINARY |
LITERAL_BOOLEAN false
CONTROL ;
CONTROL }
CONTROL }

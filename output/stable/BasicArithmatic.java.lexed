mod.permission                ln:1                public
construct.type                ln:1                class
identifier                    ln:1                BasicArithmatic
control                       ln:2                {
mod.permission                ln:3                private
mod.access                    ln:3                static
construct.type                ln:3                class
identifier                    ln:3                StaticClass
control                       ln:4                {
mod.permission                ln:5                private
identifier                    ln:5                BasicArithmatic
identifier                    ln:5                arithmatic
control                       ln:5                ;
mod.permission                ln:6                private
type                          ln:6                int
identifier                    ln:6                aNumber
operator.binary               ln:6                =
literal.int                   ln:6                1
control                       ln:6                ;
mod.permission                ln:7                private
mod.access                    ln:7                static
type                          ln:7                int
identifier                    ln:7                aSecondNumber
operator.binary               ln:7                =
literal.int                   ln:7                2
control                       ln:7                ;
control                       ln:8                }
mod.permission                ln:10               private
mod.access                    ln:10               static
type                          ln:10               int
identifier                    ln:10               constant
operator.binary               ln:10               =
literal.int                   ln:10               10
control                       ln:10               ;
mod.permission                ln:12               public
mod.access                    ln:12               static
type                          ln:12               int
identifier                    ln:12               casualMethod
control                       ln:12               (
control                       ln:12               )
control                       ln:13               {
action                        ln:14               return
literal.int                   ln:14               1
control                       ln:14               ;
control                       ln:15               }
mod.permission                ln:17               public
mod.access                    ln:17               static
type                          ln:17               void
identifier                    ln:17               main
control                       ln:17               (
identifier                    ln:17               String
identifier                    ln:17               args
control                       ln:17               )
control                       ln:18               {
identifier                    ln:19               StaticClass
identifier                    ln:19               staticClassExample
operator.binary               ln:19               =
action                        ln:19               new
identifier                    ln:19               StaticClass
control                       ln:19               (
control                       ln:19               )
control                       ln:19               ;
type                          ln:20               int
identifier                    ln:20               a
operator.binary               ln:20               =
literal.int                   ln:20               4
control                       ln:20               ;
type                          ln:21               int
identifier                    ln:21               b
operator.binary               ln:21               =
literal.int                   ln:21               2
operator.binary               ln:21               +
identifier                    ln:21               casualMethod
control                       ln:21               (
control                       ln:21               )
control                       ln:21               ;
construct.conditional         ln:22               if
control                       ln:22               (
literal.boolean               ln:22               true
control                       ln:22               )
control                       ln:23               {
identifier                    ln:24               b
operator.binary               ln:24               +=
literal.int                   ln:24               1
control                       ln:24               ;
control                       ln:25               }
type                          ln:26               int
identifier                    ln:26               c
operator.binary               ln:26               =
identifier                    ln:26               constant
control                       ln:26               ;
construct.conditional         ln:27               if
control                       ln:27               (
literal.boolean               ln:27               false
control                       ln:27               )
control                       ln:28               {
identifier                    ln:29               c
operator.binary               ln:29               +=
literal.int                   ln:29               89
control                       ln:29               ;
control                       ln:30               }
construct.conditional         ln:31               else
control                       ln:32               {
identifier                    ln:33               c
operator.binary               ln:33               +=
literal.int                   ln:33               1
control                       ln:33               ;
control                       ln:34               }
type                          ln:35               int
identifier                    ln:35               sum
operator.binary               ln:35               =
identifier                    ln:35               a
operator.binary               ln:35               +
identifier                    ln:35               b
control                       ln:35               ;
type                          ln:36               int
identifier                    ln:36               product
operator.binary               ln:36               =
identifier                    ln:36               a
operator.binary               ln:36               *
identifier                    ln:36               b
control                       ln:36               ;
type                          ln:37               int
identifier                    ln:37               difference
operator.binary               ln:37               =
identifier                    ln:37               a
operator.binary               ln:37               -
identifier                    ln:37               b
control                       ln:37               ;
type                          ln:38               int
identifier                    ln:38               addImmediate
operator.binary               ln:38               =
identifier                    ln:38               a
operator.binary               ln:38               +
literal.int                   ln:38               2
control                       ln:38               ;
type                          ln:39               int
identifier                    ln:39               subImmediate
operator.binary               ln:39               =
identifier                    ln:39               a
operator.binary               ln:39               -
literal.int                   ln:39               2
control                       ln:39               ;
comment.line                  ln:40               //int addConstant = b * constant;
comment.line                  ln:41               //addConstant += 2;
type                          ln:42               int
identifier                    ln:42               multiplyImmediate
operator.binary               ln:42               =
identifier                    ln:42               b
operator.binary               ln:42               *
literal.int                   ln:42               0x05
control                       ln:42               ;
type                          ln:43               int
identifier                    ln:43               parenthesis
operator.binary               ln:43               =
identifier                    ln:43               a
operator.binary               ln:43               +
control                       ln:43               (
identifier                    ln:43               a
operator.binary               ln:43               +
identifier                    ln:43               b
control                       ln:43               )
control                       ln:43               ;
type                          ln:44               int
identifier                    ln:44               pemdasFull
operator.binary               ln:44               =
control                       ln:44               (
identifier                    ln:44               a
operator.binary               ln:44               +
identifier                    ln:44               b
control                       ln:44               )
operator.binary               ln:44               *
literal.int                   ln:44               3
operator.binary               ln:44               -
literal.int                   ln:44               10
control                       ln:44               ;
type                          ln:45               int
identifier                    ln:45               pemdasFullAlternate
operator.binary               ln:45               =
identifier                    ln:45               a
operator.binary               ln:45               +
identifier                    ln:45               b
operator.binary               ln:45               *
control                       ln:45               (
literal.int                   ln:45               3
operator.binary               ln:45               -
literal.int                   ln:45               10
control                       ln:45               )
control                       ln:45               ;
type                          ln:46               int
identifier                    ln:46               multipleParenthis
operator.binary               ln:46               =
literal.int                   ln:46               1
operator.binary               ln:46               +
control                       ln:46               (
identifier                    ln:46               a
operator.binary               ln:46               +
control                       ln:46               (
identifier                    ln:46               b
operator.binary               ln:46               -
literal.int                   ln:46               5
control                       ln:46               )
operator.binary               ln:46               *
literal.int                   ln:46               2
control                       ln:46               )
operator.binary               ln:46               *
literal.int                   ln:46               7
control                       ln:46               ;
comment.line                  ln:47               //multiplyImmediate = multiplyImmediate << 1;
comment.line                  ln:48               //multiplyImmediate++;
comment.line                  ln:49               //boolean test = true | false;
comment.line                  ln:52               //CasualMethod();
comment.line                  ln:54               //Sum(a, b);
comment.line                  ln:55               // DO NOT LEX
comment.block                 ln:56               /* Do not lex */
comment.block                 ln:57               /*
		 * Do not lex 2
		 */
comment.line                  ln:60               // /**/ Do not lex 3
comment.block                 ln:61               /*
		 *
		 * // */
comment.line                  ln:64               // Strings are currently unsupported
comment.line                  ln:65               // String s = "/*LexAstring" + lex + "LexAstring*/ LexAstring";
control                       ln:66               }
control                       ln:67               }
